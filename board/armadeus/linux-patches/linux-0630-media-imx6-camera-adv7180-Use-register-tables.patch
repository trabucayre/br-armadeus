From 40794a096666495c3cc4ab3779059d9273374135 Mon Sep 17 00:00:00 2001
From: Steve Longerbeam <steve_longerbeam@mentor.com>
Date: Mon, 16 Mar 2015 16:09:57 -0700
Subject: [PATCH 630/668] media: imx6 camera: adv7180: Use register tables

Convert adv7180_hard_reset() to load from register tables.

Port of linux-meibp c17ec0e2f2b431e49a42a5238ba82eb928808b71.

Signed-off-by: Steve Longerbeam <steve_longerbeam@mentor.com>
---
 drivers/staging/media/imx6/capture/adv7180.c | 342 ++++++++-------------------
 1 file changed, 96 insertions(+), 246 deletions(-)

diff --git a/drivers/staging/media/imx6/capture/adv7180.c b/drivers/staging/media/imx6/capture/adv7180.c
index 72f2422..1a62c4c 100644
--- a/drivers/staging/media/imx6/capture/adv7180.c
+++ b/drivers/staging/media/imx6/capture/adv7180.c
@@ -275,6 +275,81 @@ static const struct adv7180_inputs_t adv7180_inputs_40_32[] = {
 #define NUM_INPUTS_40_32 ARRAY_SIZE(adv7180_inputs_40_32)
 #endif
 
+struct adv7180_reg_tbl_t {
+	u8 reg;
+	u8 val;
+};
+
+/*
+ * this is a special reg value inserted into a register table
+ * indicating a delay is required in msec given in val
+ */
+#define ADV_DELAY  -1
+
+static const struct adv7180_reg_tbl_t adv7180_fsl_init_reg[] = {
+	{ 0x00, 0x00 },
+	{ 0x01, 0xc8 }, { 0x02, 0x04 }, { 0x03, 0x00 }, { 0x04, 0x45 },
+	{ 0x05, 0x00 }, { 0x06, 0x02 }, { 0x07, 0x7F }, { 0x08, 0x80 },
+	{ 0x0A, 0x00 }, { 0x0B, 0x00 }, { 0x0C, 0x36 }, { 0x0D, 0x7C },
+	{ 0x0E, 0x00 }, { 0x0F, 0x00 }, { 0x13, 0x00 }, { 0x14, 0x12 },
+	{ 0x15, 0x00 }, { 0x16, 0x00 }, { 0x17, 0x01 }, { 0x18, 0x93 },
+	{ 0xF1, 0x19 }, { 0x1A, 0x00 }, { 0x1B, 0x00 }, { 0x1C, 0x00 },
+	{ 0x1D, 0x40 }, { 0x1E, 0x00 }, { 0x1F, 0x00 }, { 0x20, 0x00 },
+	{ 0x21, 0x00 }, { 0x22, 0x00 }, { 0x23, 0xC0 }, { 0x24, 0x00 },
+	{ 0x25, 0x00 }, { 0x26, 0x00 }, { 0x27, 0x58 }, { 0x28, 0x00 },
+	{ 0x29, 0x00 }, { 0x2A, 0x00 }, { 0x2B, 0xE1 }, { 0x2C, 0xAE },
+	{ 0x2D, 0xF4 }, { 0x2E, 0x00 }, { 0x2F, 0xF0 }, { 0x30, 0x00 },
+	{ 0x31, 0x12 }, { 0x32, 0x41 }, { 0x33, 0x84 }, { 0x34, 0x00 },
+	{ 0x35, 0x02 }, { 0x36, 0x00 }, { 0x37, 0x01 }, { 0x38, 0x80 },
+	{ 0x39, 0xC0 }, { 0x3A, 0x10 }, { 0x3B, 0x05 }, { 0x3C, 0x58 },
+	{ 0x3D, 0xB2 }, { 0x3E, 0x64 }, { 0x3F, 0xE4 }, { 0x40, 0x90 },
+	{ 0x41, 0x01 }, { 0x42, 0x7E }, { 0x43, 0xA4 }, { 0x44, 0xFF },
+	{ 0x45, 0xB6 }, { 0x46, 0x12 }, { 0x48, 0x00 }, { 0x49, 0x00 },
+	{ 0x4A, 0x00 }, { 0x4B, 0x00 }, { 0x4C, 0x00 }, { 0x4D, 0xEF },
+	{ 0x4E, 0x08 }, { 0x4F, 0x08 }, { 0x50, 0x08 }, { 0x51, 0xA4 },
+	{ 0x52, 0x0B }, { 0x53, 0x4E }, { 0x54, 0x80 }, { 0x55, 0x00 },
+	{ 0x56, 0x10 }, { 0x57, 0x00 }, { 0x58, 0x00 }, { 0x59, 0x00 },
+	{ 0x5A, 0x00 }, { 0x5B, 0x00 }, { 0x5C, 0x00 }, { 0x5D, 0x00 },
+	{ 0x5E, 0x00 }, { 0x5F, 0x00 }, { 0x60, 0x00 }, { 0x61, 0x00 },
+	{ 0x62, 0x20 }, { 0x63, 0x00 }, { 0x64, 0x00 }, { 0x65, 0x00 },
+	{ 0x66, 0x00 }, { 0x67, 0x03 }, { 0x68, 0x01 }, { 0x69, 0x00 },
+	{ 0x6A, 0x00 }, { 0x6B, 0xC0 }, { 0x6C, 0x00 }, { 0x6D, 0x00 },
+	{ 0x6E, 0x00 }, { 0x6F, 0x00 }, { 0x70, 0x00 }, { 0x71, 0x00 },
+	{ 0x72, 0x00 }, { 0x73, 0x10 }, { 0x74, 0x04 }, { 0x75, 0x01 },
+	{ 0x76, 0x00 }, { 0x77, 0x3F }, { 0x78, 0xFF }, { 0x79, 0xFF },
+	{ 0x7A, 0xFF }, { 0x7B, 0x1E }, { 0x7C, 0xC0 }, { 0x7D, 0x00 },
+	{ 0x7E, 0x00 }, { 0x7F, 0x00 }, { 0x80, 0x00 }, { 0x81, 0xC0 },
+	{ 0x82, 0x04 }, { 0x83, 0x00 }, { 0x84, 0x0C }, { 0x85, 0x02 },
+	{ 0x86, 0x03 }, { 0x87, 0x63 }, { 0x88, 0x5A }, { 0x89, 0x08 },
+	{ 0x8A, 0x10 }, { 0x8B, 0x00 }, { 0x8C, 0x40 }, { 0x8D, 0x00 },
+	{ 0x8E, 0x40 }, { 0x8F, 0x00 }, { 0x90, 0x00 }, { 0x91, 0x50 },
+	{ 0x92, 0x00 }, { 0x93, 0x00 }, { 0x94, 0x00 }, { 0x95, 0x00 },
+	{ 0x96, 0x00 }, { 0x97, 0xF0 }, { 0x98, 0x00 }, { 0x99, 0x00 },
+	{ 0x9A, 0x00 }, { 0x9B, 0x00 }, { 0x9C, 0x00 }, { 0x9D, 0x00 },
+	{ 0x9E, 0x00 }, { 0x9F, 0x00 }, { 0xA0, 0x00 }, { 0xA1, 0x00 },
+	{ 0xA2, 0x00 }, { 0xA3, 0x00 }, { 0xA4, 0x00 }, { 0xA5, 0x00 },
+	{ 0xA6, 0x00 }, { 0xA7, 0x00 }, { 0xA8, 0x00 }, { 0xA9, 0x00 },
+	{ 0xAA, 0x00 }, { 0xAB, 0x00 }, { 0xAC, 0x00 }, { 0xAD, 0x00 },
+	{ 0xAE, 0x60 }, { 0xAF, 0x00 }, { 0xB0, 0x00 }, { 0xB1, 0x60 },
+	{ 0xB2, 0x1C }, { 0xB3, 0x54 }, { 0xB4, 0x00 }, { 0xB5, 0x00 },
+	{ 0xB6, 0x00 }, { 0xB7, 0x13 }, { 0xB8, 0x03 }, { 0xB9, 0x33 },
+	{ 0xBF, 0x02 }, { 0xC0, 0x00 }, { 0xC1, 0x00 }, { 0xC2, 0x00 },
+	{ 0xC3, 0x00 }, { 0xC4, 0x00 }, { 0xC5, 0x81 }, { 0xC6, 0x00 },
+	{ 0xC7, 0x00 }, { 0xC8, 0x00 }, { 0xC9, 0x04 }, { 0xCC, 0x69 },
+	{ 0xCD, 0x00 }, { 0xCE, 0x01 }, { 0xCF, 0xB4 }, { 0xD0, 0x00 },
+	{ 0xD1, 0x10 }, { 0xD2, 0xFF }, { 0xD3, 0xFF }, { 0xD4, 0x7F },
+	{ 0xD5, 0x7F }, { 0xD6, 0x3E }, { 0xD7, 0x08 }, { 0xD8, 0x3C },
+	{ 0xD9, 0x08 }, { 0xDA, 0x3C }, { 0xDB, 0x9B }, { 0xDC, 0xAC },
+	{ 0xDD, 0x4C }, { 0xDE, 0x00 }, { 0xDF, 0x00 }, { 0xE0, 0x14 },
+	{ 0xE1, 0x80 }, { 0xE2, 0x80 }, { 0xE3, 0x80 }, { 0xE4, 0x80 },
+	{ 0xE5, 0x25 }, { 0xE6, 0x44 }, { 0xE7, 0x63 }, { 0xE8, 0x65 },
+	{ 0xE9, 0x14 }, { 0xEA, 0x63 }, { 0xEB, 0x55 }, { 0xEC, 0x55 },
+	{ 0xEE, 0x00 }, { 0xEF, 0x4A }, { 0xF0, 0x44 }, { 0xF1, 0x0C },
+	{ 0xF2, 0x32 }, { 0xF3, 0x00 }, { 0xF4, 0x3F }, { 0xF5, 0xE0 },
+	{ 0xF6, 0x69 }, { 0xF7, 0x10 }, { 0xF8, 0x00 }, { 0xF9, 0x03 },
+	{ 0xFA, 0xFA }, { 0xFB, 0x40 },
+};
+
 #define ADV7180_VOLTAGE_ANALOG               1800000
 #define ADV7180_VOLTAGE_DIGITAL_CORE         1800000
 #define ADV7180_VOLTAGE_DIGITAL_IO           3300000
@@ -407,6 +482,25 @@ static int adv7180_write_reg(struct adv7180_dev *sensor, u8 reg, u8 val)
 			return ret;				\
 	}
 
+static int adv7180_load_reg_tbl(struct adv7180_dev *sensor,
+				const struct adv7180_reg_tbl_t *tbl, int n)
+{
+	int ret, i;
+
+	for (i = 0; i < n; i++) {
+		if (tbl->reg == ADV_DELAY) {
+			unsigned long usec = (unsigned long)tbl->val * 1000;
+			usleep_range(usec, usec + 1);
+			continue;
+		}
+
+		ADV7180_WRITE_REG(sensor, tbl->reg, tbl->val);
+		tbl++;
+	}
+
+	return 0;
+}
+
 /* Read AD_RESULT to get the autodetected video standard */
 static int adv7180_get_autodetect_std(struct adv7180_dev *sensor,
 				      u8 stat1, bool *status_change)
@@ -900,256 +994,12 @@ static struct v4l2_subdev_ops adv7180_subdev_ops = {
  */
 static int adv7180_hard_reset(struct adv7180_dev *sensor)
 {
-	int ret;
-
 	/* assert reset bit */
 	adv7180_write_reg(sensor, ADV7180_PWR_MNG, 0x80);
 	usleep_range(5000, 5001);
 
-	/* Set analog mux for Composite Ain1 */
-	ADV7180_WRITE_REG(sensor, ADV7180_INPUT_CTL, 0x00);
-
-	/* Datasheet recommends */
-	ADV7180_WRITE_REG(sensor, 0x01, 0xc8);
-	ADV7180_WRITE_REG(sensor, 0x02, 0x04);
-	ADV7180_WRITE_REG(sensor, 0x03, 0x00);
-	ADV7180_WRITE_REG(sensor, 0x04, 0x45);
-	ADV7180_WRITE_REG(sensor, 0x05, 0x00);
-	ADV7180_WRITE_REG(sensor, 0x06, 0x02);
-	ADV7180_WRITE_REG(sensor, 0x07, 0x7F);
-	ADV7180_WRITE_REG(sensor, 0x08, 0x80);
-	ADV7180_WRITE_REG(sensor, 0x0A, 0x00);
-	ADV7180_WRITE_REG(sensor, 0x0B, 0x00);
-	ADV7180_WRITE_REG(sensor, 0x0C, 0x36);
-	ADV7180_WRITE_REG(sensor, 0x0D, 0x7C);
-	ADV7180_WRITE_REG(sensor, 0x0E, 0x00);
-	ADV7180_WRITE_REG(sensor, 0x0F, 0x00);
-	ADV7180_WRITE_REG(sensor, 0x13, 0x00);
-	ADV7180_WRITE_REG(sensor, 0x14, 0x12);
-	ADV7180_WRITE_REG(sensor, 0x15, 0x00);
-	ADV7180_WRITE_REG(sensor, 0x16, 0x00);
-	ADV7180_WRITE_REG(sensor, 0x17, 0x01);
-	ADV7180_WRITE_REG(sensor, 0x18, 0x93);
-	ADV7180_WRITE_REG(sensor, 0xF1, 0x19);
-	ADV7180_WRITE_REG(sensor, 0x1A, 0x00);
-	ADV7180_WRITE_REG(sensor, 0x1B, 0x00);
-	ADV7180_WRITE_REG(sensor, 0x1C, 0x00);
-	ADV7180_WRITE_REG(sensor, 0x1D, 0x40);
-	ADV7180_WRITE_REG(sensor, 0x1E, 0x00);
-	ADV7180_WRITE_REG(sensor, 0x1F, 0x00);
-	ADV7180_WRITE_REG(sensor, 0x20, 0x00);
-	ADV7180_WRITE_REG(sensor, 0x21, 0x00);
-	ADV7180_WRITE_REG(sensor, 0x22, 0x00);
-	ADV7180_WRITE_REG(sensor, 0x23, 0xC0);
-	ADV7180_WRITE_REG(sensor, 0x24, 0x00);
-	ADV7180_WRITE_REG(sensor, 0x25, 0x00);
-	ADV7180_WRITE_REG(sensor, 0x26, 0x00);
-	ADV7180_WRITE_REG(sensor, 0x27, 0x58);
-	ADV7180_WRITE_REG(sensor, 0x28, 0x00);
-	ADV7180_WRITE_REG(sensor, 0x29, 0x00);
-	ADV7180_WRITE_REG(sensor, 0x2A, 0x00);
-	ADV7180_WRITE_REG(sensor, 0x2B, 0xE1);
-	ADV7180_WRITE_REG(sensor, 0x2C, 0xAE);
-	ADV7180_WRITE_REG(sensor, 0x2D, 0xF4);
-	ADV7180_WRITE_REG(sensor, 0x2E, 0x00);
-	ADV7180_WRITE_REG(sensor, 0x2F, 0xF0);
-	ADV7180_WRITE_REG(sensor, 0x30, 0x00);
-	ADV7180_WRITE_REG(sensor, 0x31, 0x12);
-	ADV7180_WRITE_REG(sensor, 0x32, 0x41);
-	ADV7180_WRITE_REG(sensor, 0x33, 0x84);
-	ADV7180_WRITE_REG(sensor, 0x34, 0x00);
-	ADV7180_WRITE_REG(sensor, 0x35, 0x02);
-	ADV7180_WRITE_REG(sensor, 0x36, 0x00);
-	ADV7180_WRITE_REG(sensor, 0x37, 0x01);
-	ADV7180_WRITE_REG(sensor, 0x38, 0x80);
-	ADV7180_WRITE_REG(sensor, 0x39, 0xC0);
-	ADV7180_WRITE_REG(sensor, 0x3A, 0x10);
-	ADV7180_WRITE_REG(sensor, 0x3B, 0x05);
-	ADV7180_WRITE_REG(sensor, 0x3C, 0x58);
-	ADV7180_WRITE_REG(sensor, 0x3D, 0xB2);
-	ADV7180_WRITE_REG(sensor, 0x3E, 0x64);
-	ADV7180_WRITE_REG(sensor, 0x3F, 0xE4);
-	ADV7180_WRITE_REG(sensor, 0x40, 0x90);
-	ADV7180_WRITE_REG(sensor, 0x41, 0x01);
-	ADV7180_WRITE_REG(sensor, 0x42, 0x7E);
-	ADV7180_WRITE_REG(sensor, 0x43, 0xA4);
-	ADV7180_WRITE_REG(sensor, 0x44, 0xFF);
-	ADV7180_WRITE_REG(sensor, 0x45, 0xB6);
-	ADV7180_WRITE_REG(sensor, 0x46, 0x12);
-	ADV7180_WRITE_REG(sensor, 0x48, 0x00);
-	ADV7180_WRITE_REG(sensor, 0x49, 0x00);
-	ADV7180_WRITE_REG(sensor, 0x4A, 0x00);
-	ADV7180_WRITE_REG(sensor, 0x4B, 0x00);
-	ADV7180_WRITE_REG(sensor, 0x4C, 0x00);
-	ADV7180_WRITE_REG(sensor, 0x4D, 0xEF);
-	ADV7180_WRITE_REG(sensor, 0x4E, 0x08);
-	ADV7180_WRITE_REG(sensor, 0x4F, 0x08);
-	ADV7180_WRITE_REG(sensor, 0x50, 0x08);
-	ADV7180_WRITE_REG(sensor, 0x51, 0xA4);
-	ADV7180_WRITE_REG(sensor, 0x52, 0x0B);
-	ADV7180_WRITE_REG(sensor, 0x53, 0x4E);
-	ADV7180_WRITE_REG(sensor, 0x54, 0x80);
-	ADV7180_WRITE_REG(sensor, 0x55, 0x00);
-	ADV7180_WRITE_REG(sensor, 0x56, 0x10);
-	ADV7180_WRITE_REG(sensor, 0x57, 0x00);
-	ADV7180_WRITE_REG(sensor, 0x58, 0x00);
-	ADV7180_WRITE_REG(sensor, 0x59, 0x00);
-	ADV7180_WRITE_REG(sensor, 0x5A, 0x00);
-	ADV7180_WRITE_REG(sensor, 0x5B, 0x00);
-	ADV7180_WRITE_REG(sensor, 0x5C, 0x00);
-	ADV7180_WRITE_REG(sensor, 0x5D, 0x00);
-	ADV7180_WRITE_REG(sensor, 0x5E, 0x00);
-	ADV7180_WRITE_REG(sensor, 0x5F, 0x00);
-	ADV7180_WRITE_REG(sensor, 0x60, 0x00);
-	ADV7180_WRITE_REG(sensor, 0x61, 0x00);
-	ADV7180_WRITE_REG(sensor, 0x62, 0x20);
-	ADV7180_WRITE_REG(sensor, 0x63, 0x00);
-	ADV7180_WRITE_REG(sensor, 0x64, 0x00);
-	ADV7180_WRITE_REG(sensor, 0x65, 0x00);
-	ADV7180_WRITE_REG(sensor, 0x66, 0x00);
-	ADV7180_WRITE_REG(sensor, 0x67, 0x03);
-	ADV7180_WRITE_REG(sensor, 0x68, 0x01);
-	ADV7180_WRITE_REG(sensor, 0x69, 0x00);
-	ADV7180_WRITE_REG(sensor, 0x6A, 0x00);
-	ADV7180_WRITE_REG(sensor, 0x6B, 0xC0);
-	ADV7180_WRITE_REG(sensor, 0x6C, 0x00);
-	ADV7180_WRITE_REG(sensor, 0x6D, 0x00);
-	ADV7180_WRITE_REG(sensor, 0x6E, 0x00);
-	ADV7180_WRITE_REG(sensor, 0x6F, 0x00);
-	ADV7180_WRITE_REG(sensor, 0x70, 0x00);
-	ADV7180_WRITE_REG(sensor, 0x71, 0x00);
-	ADV7180_WRITE_REG(sensor, 0x72, 0x00);
-	ADV7180_WRITE_REG(sensor, 0x73, 0x10);
-	ADV7180_WRITE_REG(sensor, 0x74, 0x04);
-	ADV7180_WRITE_REG(sensor, 0x75, 0x01);
-	ADV7180_WRITE_REG(sensor, 0x76, 0x00);
-	ADV7180_WRITE_REG(sensor, 0x77, 0x3F);
-	ADV7180_WRITE_REG(sensor, 0x78, 0xFF);
-	ADV7180_WRITE_REG(sensor, 0x79, 0xFF);
-	ADV7180_WRITE_REG(sensor, 0x7A, 0xFF);
-	ADV7180_WRITE_REG(sensor, 0x7B, 0x1E);
-	ADV7180_WRITE_REG(sensor, 0x7C, 0xC0);
-	ADV7180_WRITE_REG(sensor, 0x7D, 0x00);
-	ADV7180_WRITE_REG(sensor, 0x7E, 0x00);
-	ADV7180_WRITE_REG(sensor, 0x7F, 0x00);
-	ADV7180_WRITE_REG(sensor, 0x80, 0x00);
-	ADV7180_WRITE_REG(sensor, 0x81, 0xC0);
-	ADV7180_WRITE_REG(sensor, 0x82, 0x04);
-	ADV7180_WRITE_REG(sensor, 0x83, 0x00);
-	ADV7180_WRITE_REG(sensor, 0x84, 0x0C);
-	ADV7180_WRITE_REG(sensor, 0x85, 0x02);
-	ADV7180_WRITE_REG(sensor, 0x86, 0x03);
-	ADV7180_WRITE_REG(sensor, 0x87, 0x63);
-	ADV7180_WRITE_REG(sensor, 0x88, 0x5A);
-	ADV7180_WRITE_REG(sensor, 0x89, 0x08);
-	ADV7180_WRITE_REG(sensor, 0x8A, 0x10);
-	ADV7180_WRITE_REG(sensor, 0x8B, 0x00);
-	ADV7180_WRITE_REG(sensor, 0x8C, 0x40);
-	ADV7180_WRITE_REG(sensor, 0x8D, 0x00);
-	ADV7180_WRITE_REG(sensor, 0x8E, 0x40);
-	ADV7180_WRITE_REG(sensor, 0x8F, 0x00);
-	ADV7180_WRITE_REG(sensor, 0x90, 0x00);
-	ADV7180_WRITE_REG(sensor, 0x91, 0x50);
-	ADV7180_WRITE_REG(sensor, 0x92, 0x00);
-	ADV7180_WRITE_REG(sensor, 0x93, 0x00);
-	ADV7180_WRITE_REG(sensor, 0x94, 0x00);
-	ADV7180_WRITE_REG(sensor, 0x95, 0x00);
-	ADV7180_WRITE_REG(sensor, 0x96, 0x00);
-	ADV7180_WRITE_REG(sensor, 0x97, 0xF0);
-	ADV7180_WRITE_REG(sensor, 0x98, 0x00);
-	ADV7180_WRITE_REG(sensor, 0x99, 0x00);
-	ADV7180_WRITE_REG(sensor, 0x9A, 0x00);
-	ADV7180_WRITE_REG(sensor, 0x9B, 0x00);
-	ADV7180_WRITE_REG(sensor, 0x9C, 0x00);
-	ADV7180_WRITE_REG(sensor, 0x9D, 0x00);
-	ADV7180_WRITE_REG(sensor, 0x9E, 0x00);
-	ADV7180_WRITE_REG(sensor, 0x9F, 0x00);
-	ADV7180_WRITE_REG(sensor, 0xA0, 0x00);
-	ADV7180_WRITE_REG(sensor, 0xA1, 0x00);
-	ADV7180_WRITE_REG(sensor, 0xA2, 0x00);
-	ADV7180_WRITE_REG(sensor, 0xA3, 0x00);
-	ADV7180_WRITE_REG(sensor, 0xA4, 0x00);
-	ADV7180_WRITE_REG(sensor, 0xA5, 0x00);
-	ADV7180_WRITE_REG(sensor, 0xA6, 0x00);
-	ADV7180_WRITE_REG(sensor, 0xA7, 0x00);
-	ADV7180_WRITE_REG(sensor, 0xA8, 0x00);
-	ADV7180_WRITE_REG(sensor, 0xA9, 0x00);
-	ADV7180_WRITE_REG(sensor, 0xAA, 0x00);
-	ADV7180_WRITE_REG(sensor, 0xAB, 0x00);
-	ADV7180_WRITE_REG(sensor, 0xAC, 0x00);
-	ADV7180_WRITE_REG(sensor, 0xAD, 0x00);
-	ADV7180_WRITE_REG(sensor, 0xAE, 0x60);
-	ADV7180_WRITE_REG(sensor, 0xAF, 0x00);
-	ADV7180_WRITE_REG(sensor, 0xB0, 0x00);
-	ADV7180_WRITE_REG(sensor, 0xB1, 0x60);
-	ADV7180_WRITE_REG(sensor, 0xB2, 0x1C);
-	ADV7180_WRITE_REG(sensor, 0xB3, 0x54);
-	ADV7180_WRITE_REG(sensor, 0xB4, 0x00);
-	ADV7180_WRITE_REG(sensor, 0xB5, 0x00);
-	ADV7180_WRITE_REG(sensor, 0xB6, 0x00);
-	ADV7180_WRITE_REG(sensor, 0xB7, 0x13);
-	ADV7180_WRITE_REG(sensor, 0xB8, 0x03);
-	ADV7180_WRITE_REG(sensor, 0xB9, 0x33);
-	ADV7180_WRITE_REG(sensor, 0xBF, 0x02);
-	ADV7180_WRITE_REG(sensor, 0xC0, 0x00);
-	ADV7180_WRITE_REG(sensor, 0xC1, 0x00);
-	ADV7180_WRITE_REG(sensor, 0xC2, 0x00);
-	ADV7180_WRITE_REG(sensor, 0xC3, 0x00);
-	ADV7180_WRITE_REG(sensor, 0xC4, 0x00);
-	ADV7180_WRITE_REG(sensor, 0xC5, 0x81);
-	ADV7180_WRITE_REG(sensor, 0xC6, 0x00);
-	ADV7180_WRITE_REG(sensor, 0xC7, 0x00);
-	ADV7180_WRITE_REG(sensor, 0xC8, 0x00);
-	ADV7180_WRITE_REG(sensor, 0xC9, 0x04);
-	ADV7180_WRITE_REG(sensor, 0xCC, 0x69);
-	ADV7180_WRITE_REG(sensor, 0xCD, 0x00);
-	ADV7180_WRITE_REG(sensor, 0xCE, 0x01);
-	ADV7180_WRITE_REG(sensor, 0xCF, 0xB4);
-	ADV7180_WRITE_REG(sensor, 0xD0, 0x00);
-	ADV7180_WRITE_REG(sensor, 0xD1, 0x10);
-	ADV7180_WRITE_REG(sensor, 0xD2, 0xFF);
-	ADV7180_WRITE_REG(sensor, 0xD3, 0xFF);
-	ADV7180_WRITE_REG(sensor, 0xD4, 0x7F);
-	ADV7180_WRITE_REG(sensor, 0xD5, 0x7F);
-	ADV7180_WRITE_REG(sensor, 0xD6, 0x3E);
-	ADV7180_WRITE_REG(sensor, 0xD7, 0x08);
-	ADV7180_WRITE_REG(sensor, 0xD8, 0x3C);
-	ADV7180_WRITE_REG(sensor, 0xD9, 0x08);
-	ADV7180_WRITE_REG(sensor, 0xDA, 0x3C);
-	ADV7180_WRITE_REG(sensor, 0xDB, 0x9B);
-	ADV7180_WRITE_REG(sensor, 0xDC, 0xAC);
-	ADV7180_WRITE_REG(sensor, 0xDD, 0x4C);
-	ADV7180_WRITE_REG(sensor, 0xDE, 0x00);
-	ADV7180_WRITE_REG(sensor, 0xDF, 0x00);
-	ADV7180_WRITE_REG(sensor, 0xE0, 0x14);
-	ADV7180_WRITE_REG(sensor, 0xE1, 0x80);
-	ADV7180_WRITE_REG(sensor, 0xE2, 0x80);
-	ADV7180_WRITE_REG(sensor, 0xE3, 0x80);
-	ADV7180_WRITE_REG(sensor, 0xE4, 0x80);
-	ADV7180_WRITE_REG(sensor, 0xE5, 0x25);
-	ADV7180_WRITE_REG(sensor, 0xE6, 0x44);
-	ADV7180_WRITE_REG(sensor, 0xE7, 0x63);
-	ADV7180_WRITE_REG(sensor, 0xE8, 0x65);
-	ADV7180_WRITE_REG(sensor, 0xE9, 0x14);
-	ADV7180_WRITE_REG(sensor, 0xEA, 0x63);
-	ADV7180_WRITE_REG(sensor, 0xEB, 0x55);
-	ADV7180_WRITE_REG(sensor, 0xEC, 0x55);
-	ADV7180_WRITE_REG(sensor, 0xEE, 0x00);
-	ADV7180_WRITE_REG(sensor, 0xEF, 0x4A);
-	ADV7180_WRITE_REG(sensor, 0xF0, 0x44);
-	ADV7180_WRITE_REG(sensor, 0xF1, 0x0C);
-	ADV7180_WRITE_REG(sensor, 0xF2, 0x32);
-	ADV7180_WRITE_REG(sensor, 0xF3, 0x00);
-	ADV7180_WRITE_REG(sensor, 0xF4, 0x3F);
-	ADV7180_WRITE_REG(sensor, 0xF5, 0xE0);
-	ADV7180_WRITE_REG(sensor, 0xF6, 0x69);
-	ADV7180_WRITE_REG(sensor, 0xF7, 0x10);
-	ADV7180_WRITE_REG(sensor, 0xF8, 0x00);
-	ADV7180_WRITE_REG(sensor, 0xF9, 0x03);
-	ADV7180_WRITE_REG(sensor, 0xFA, 0xFA);
-	ADV7180_WRITE_REG(sensor, 0xFB, 0x40);
-
-	return 0;
+	return adv7180_load_reg_tbl(sensor, adv7180_fsl_init_reg,
+				    ARRAY_SIZE(adv7180_fsl_init_reg));
 }
 
 /*
-- 
2.4.10

